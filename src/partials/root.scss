@use "sass:map";
@use "functions";
$root-props-default: (
    color-scheme: light dark,
);
$root-props: map.merge((), $root-props-default);
$root-props-dark-default: (
    color-scheme: dark,
    --theme-binary: 0,
    --contrast: #000,
    --opposite-contrast: #fff,
);
$root-props-dark: map.merge((), $root-props-dark-default);
$root-props-light-default: (
    color-scheme: light,
    --theme-binary: 1,
    --contrast: #fff,
    --opposite-contrast: #000,
);
$root-props-light: map.merge((), $root-props-light-default);
@mixin printOut($props, $default, $include-default: true, $exlude-prefixes: ()) {
    @each $name, $value in $props {
        @if $include-default or not map.has-key($default, $name) {
            $is-excluded: false;
            @if not functions.map-is-empty($exlude-prefixes) {
                @each $prefix-name, $prefix in $exlude-prefixes {
                    @if functions.string-starts-with($name, $prefix) {
                        $is-excluded: true;
                    }
                }
            }
            @if not $is-excluded {
                #{$name}: #{$value};
            }
        }
    }
}
@mixin printDeclarations($include-default: true, $exclude-prefixes: ()) {
    @include printOut($root-props, $root-props-default, $include-default, $exclude-prefixes);
    &[data-theme=dark] {
        @include printOut($root-props-dark, $root-props-dark-default, $include-default, $exclude-prefixes);
    }
    &[data-theme=light] {
        @include printOut($root-props-light, $root-props-light-default, $include-default, $exclude-prefixes);
    }
}
@mixin printProps($selector: ":root", $layer: "root", $include-default: true, $exclude-prefixes: ()) {
    /* Root Properties */
    @layer #{$layer} {
        #{$selector} {
            @include printDeclarations($include-default, $exclude-prefixes);
        }
    }
}